
################################################################
# MATLAB Code for Generic Data Simulation (Simulation Study 1) #
################################################################

nsim = 100; % number of simulations
nw = 500;    % number of windows
nt = 7;   % number of design points
nco = 25;   % number of controls
nca = 50;   % number of cases
tt = linspace(0,1,nt);

design.nsim = nsim;
design.nw   = nw;
design.nt   = nt;
design.nco  = nco;
design.nca  = nca;
design.tt   = tt; 

ft = zeros(nt,nw);  % control mean
gt = zeros(nt,nw);  % case mean
fti = zeros(nt,nw,nco); % individual function in control
gti = zeros(nt,nw,nca); % individual function in case
yi  = zeros(nt,nw,nco); % response in control
wi  = zeros(nt,nw,nca); % response function in case

% Mean functions for control

ft(:,1) = sin(tt.*(2*pi));
ft(:,2) = sin(tt.*(pi));
ft(:,3) = sin(pi+tt.*(pi));
ft(:,4) = sin(tt.*(pi/2));
ft(:,5) = sin(pi/2+tt.*(pi/2));
ft(:,6) = sin(pi+tt.*(pi/2));
ft(:,7) = sin(pi*3/2+tt.*(pi/2));
ft(:,8) = ones(nt,1).*0;
ft(:,9) = ones(nt,1).*1.0986;
ft(:,10) = ones(nt,1).*-1.0986;

gt(:,1) = sin(tt.*(2*pi));
gt(:,2) = sin(tt.*(2*pi));
gt(:,3) = -sin(pi+tt.*(pi))-1;
gt(:,4) = -sin(tt.*(pi/2))+1;
gt(:,5) = -sin(pi/2+tt.*(pi*2))./2+.5;
gt(:,6) = sin(pi+tt.*(pi));
gt(:,7) = -sin(pi*3/2+tt.*(pi/2))-1;
gt(:,8) = ones(nt,1).*0;
gt(:,9) = ones(nt,1).*-1.0986;
gt(:,10) = ones(nt,1).*-0.4055;

% mean function

mean.ft = 1./(1+exp(-ft));
mean.gt = 1./(1+exp(-gt));

% wavelet decomposition: 

%     Daubechies 10 with varying decomposition level 2~5, 
%     level dependent thresholds by using BirgÃ©-Massart strategy 
%     (BirgÃ©, L.; P. Massart (1997), "From model selection to adaptive 
%     estimation," in D. Pollard (ed), Festchrift for L. Le Cam, 
%     Springer, pp. 55?88.)with
%         alpha=3 and alpha=3 (denoising 3, compression 1.5)
%         M=l(1) the number of the coarsest approximation coefficient

wname = 'db10'; alpha = 3;
lev0 = [5, 4, 3, 2, 3, 4, 5, 4, 3, 2];
wavelet.wname = wname;
wavelet.alpha = alpha;
wavelet.lev0 = lev0;

simdata.design = design;
simdata.mean   = mean;
simdata.wavelet= wavelet;

% AR(1) parameters

rho=0.3;
sig=[.4, .6, .8, 1, .8, .6, .4, .6, .8, 1];
ar.rho = rho;
ar.sig = sig;
simdata.ar = ar;
sim(nsim) = struct('fti',[],'gti',[],'yi',[],'wi',[]);

for isim=1:nsim

    % Individual functions for control

    for kk=1:nco
        for k=1:nw
            y = ft(:,k) + normrnd(0,.2,nt,1);
            lev = max(min(lev0(k),nt-4),1);
            [c,l] = wavedec(y,lev,wname);
            m = l(1);
            [thr,nkeep] = wdcbm(c,l,alpha,m);
            % denoising
            [yhat,cyd,lyd,perf0,perfl2] = wdencmp('lvd',c,l,wname,lev,thr,'h');
            fti(:,k,kk) = yhat;
        end
    end
    sim(isim).fti = 1./(1+exp(-fti));

    % Individual functions for case

    for kk=1:nca
        for k=1:nw
            y = gt(:,k) + normrnd(0,.2,nt,1);
            lev = max(min(lev0(k),nt-4),1);
            [c,l] = wavedec(y,lev,wname);
            m = l(1);
            [thr,nkeep] = wdcbm(c,l,alpha,m);
            % denoising
            [yhat,cyd,lyd,perf0,perfl2] = wdencmp('lvd',c,l,wname,lev,thr,'h');
            gti(:,k,kk) = yhat;
        end
    end
    sim(isim).gti = 1./(1+exp(-gti));

    % AR(1) error with rho  = 0.5;

    for kk=1:nco

        e1 = normrnd(0,sig(1));
        for k=1:nw
            yi(1,k,kk) = fti(1,k,kk)+e1;
            for k1=2:nt
                e2 = normrnd(rho*e1,sig(k));
                yi(k1,k,kk) = fti(k1,k,kk)+e2;
                e1 = e2;
            end
            e1 = normrnd(rho*e1,sig(k));
        end
    end
    sim(isim).yi = 1./(1+exp(-yi));

    for kk=1:nca
        e1 = normrnd(0,sig(1));
        for k=1:nw
            wi(1,k,kk) = gti(1,k,kk)+e1;
            for k1=2:nt
                e2 = normrnd(rho*e1,sig(k));
                wi(k1,k,kk) = gti(k1,k,kk)+e2;
                e1 = e2;
            end
            e1 = normrnd(rho*e1,sig(k));
        end
    end
    sim(isim).wi = 1./(1+exp(-wi));
    disp(['simulation = ',num2str(isim)])
end
simdata.sim = sim;
save('D:\research\Biometrics_revision\Codes\winsize70\simdata','simdata') 

#### Plotting Figure 1 ####


load simdata5

nsim = simdata.design.nsim;
nw   = simdata.design.nw;
nt   = simdata.design.nt;
nca  = simdata.design.nca;
nco  = simdata.design.nco;
tt   = simdata.design.tt;

ft = simdata.mean.ft;
gt = simdata.mean.gt;

fti = simdata.sim(1).fti;
gti = simdata.sim(1).gti;

yi = simdata.sim(1).yi;
wi = simdata.sim(1).wi;

figure,hold on
sub_plot(2,nw/2,'Gap',[0.03 0.06])
for k=1:nw
    sub_plot(k);
    plot(tt,ft(:,k),'b:','linewidth',2)
    ylim([0,1])
end
for k=1:nw
    sub_plot(k);
    plot(tt,gt(:,k),'r:','linewidth',2)
    ylim([0,1])
end

for k=1:nw
    sub_plot(k)
    plot(tt,fti(:,k,1),'b','linewidth',1)
end
for k=1:nw
    sub_plot(k)
    plot(tt,gti(:,k,1),'r','linewidth',1)
end

for k=1:nw
    sub_plot(k)
    plot(tt,yi(:,k,1),'co','markersize',3)
end
for k=1:nw
    sub_plot(k)
    plot(tt,wi(:,k,1),'mx','markersize',5)
end

save_plot('eps',1,[.1 3],'sim5'); % dual margin (left=2, bottom=.3)